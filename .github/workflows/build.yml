# Название workflow (процесса), которое будет отображаться в интерфейсе GitHub Actions
name: Build and Publish

# Триггеры, определяющие когда запускается workflow
on:
  push:    # запускается при любом push'е в любую ветку

# Определение jobs (заданий), которые будут выполняться
jobs:
  # Job с именем "build" - основная задача сборки
  build:
    # Динамическое имя для job, которое будет включать название ОС
    name: Build on ${{ matrix.os }}
    
    # Указываем, на какой ОС запускать job (берется из матрицы стратегии)
    runs-on: ${{ matrix.os }}
    
    # Стратегия выполнения - позволяет запускать job на нескольких конфигурациях
    strategy:
      matrix:
        # Матрица операционных систем: сборка будет запущена на Ubuntu и Windows
        os: [ubuntu-latest, windows-latest]
        
    # Последовательность шагов, которые выполнятся в рамках этого job
    steps:
    # Шаг 1: Получение кода из репозитория
    - name: Checkout code
      # Используем официальное действие для checkout'а кода (версия 4)
      uses: actions/checkout@v4
      # Этот шаг копирует код вашего репозитория на виртуальную машину сборки
      
    # Шаг 2: Установка .NET SDK
    - name: Setup .NET
      # Используем официальное действие для установки .NET
      uses: actions/setup-dotnet@v3
      with:
        # Указываем конкретную версию .NET 8.0.x (x - последняя минорная версия)
        dotnet-version: '8.0.x'
      # После этого шага на виртуальной машине будет доступен .NET CLI
      
    # Шаг 3: Восстановление зависимостей проекта
    - name: Restore dependencies
      # Команда dotnet restore загружает все NuGet-пакеты, указанные в .csproj файле
      run: dotnet restore
      # Восстанавливает пакеты из nuget.org или указанных источников
      
    # Шаг 4: Сборка проекта
    - name: Build
      # Компиляция проекта в режиме Release (оптимизированная сборка)
      run: dotnet build --configuration Release --no-restore
      # Флаг --no-restore указывает, что восстановление пакетов уже выполнено
      # Результат - скомпилированные DLL и EXE файлы в папке bin/Release
      
    # Шаг 5: Публикация (создание готового к распространению пакета)
    - name: Publish application
      # Создает самодостаточное или зависимое от framework развертывание
      run: dotnet publish --configuration Release --output ./publish --no-build
      # --output ./publish - указывает папку для результатов
      # --no-build - использует уже скомпилированные файлы из предыдущего шага
      # В папке ./publish будут все необходимые файлы для запуска приложения
      
    # Шаг 6: Загрузка артефактов (сохранение результатов сборки)
    - name: Upload artifacts
      # Используем официальное действие для загрузки артефактов
      uses: actions/upload-artifact@v4
      with:
        # Имя артефакта будет включать название ОС (например: myapp-ubuntu-latest)
        name: myapp-${{ matrix.os }}
        
        # Путь к файлам для загрузки (все содержимое папки publish)
        path: |
          ./publish/**
        # Двойные звезды ** означают "все файлы и подпапки рекурсивно"
        
        # Время хранения артефактов в днях (после 30 дней автоматически удалятся)
        retention-days: 30
      # После этого шага артефакты можно скачать из интерфейса GitHub Actions
